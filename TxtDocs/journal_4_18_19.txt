 Review https://github.com/ultrasonicsoft/angular-quiz for an example of a pretty
 slim angular application.

 Also going over angular basics so that I can put the framework and it's bits
 into words in an effort to pull the disparate concepts I've learned into a 
 cohesive structure. I think routing and component/service life cycle is giving 
 me the most trouble conceptually atm.

 I redownloaded the Max's Udemy finished project to review how it worked again as
 a lot of the issues I'm having now are solved in that finished course (which
 I went all the way through, but couldn't locate my own finished project).

 Went through "Routing modularization and lazy loading" course here: 
 https://www.linkedin.com/learning/angular-routing/routing-modularization-and-lazy-loading?u=26113994

 Several key take aways from the course: 

 * If you want to load 2 components side by side, they MUST
 have a parent child relationship where the parent loads
 a component and layout with a router-outlet tag positioned inside
 as desired.
 * These relationships can be nested...so a child of a parent
 component can be a parent to it's own child. 
 * The "  <base href="/">  " tag in index.html indicates the root url
 for an angular application. If hosting multiple apps on the same server,
 this will need to be unique across them.
* Router guards can be generated through the cli via "ng g g <location/name>"
* Router guards are really angular services as they have the @injectable
decorator preceeding the class declaration.
* Because Router guards are services, they must be included in the Providers
array of the module providing them.
* CanActivate - determines if a user can get to a particular router
* canDeactivate - prevents user from leaving a component. This could be useful
in situations where you want to make sure the user saves the form before leaving.
